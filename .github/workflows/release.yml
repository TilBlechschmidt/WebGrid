name: 🚀 Project release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-core:
    name: 🔨 Build Core component
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: core/.cache
          key: build-core-${{ runner.os }}-lockfile=${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: make build-core

      - name: Change cache permission
        run: sudo chmod -R 777 core/.cache

      - uses: actions/upload-artifact@v2
        with:
          name: core-executable
          path: .artifacts/core-executable/webgrid

      - uses: actions/upload-artifact@v2
        with:
          name: core-documentation
          path: .artifacts/core-documentation

  build-api:
    name: 🔨 Build API component
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: "14"

      - run: make build-api

      - uses: actions/upload-artifact@v2
        with:
          name: api-executable
          path: .artifacts/api-executable/index.js

  publish-api:
    name: 🐳 Publish API to Docker Hub
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: api-executable
          path: .artifacts/api-executable

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=webgrid/api
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "tags=${TAGS}" >> $GITHUB_ENV
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: webgrid
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push webgrid/api Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: distribution/docker/images/api/Dockerfile
          tags: ${{ env.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ env.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  publish-core:
    name: 🐳 Publish Core to Docker Hub
    runs-on: ubuntu-latest
    needs: build-core
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: core-executable
          path: .artifacts/core-executable

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=webgrid/core
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "tags=${TAGS}" >> $GITHUB_ENV
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: webgrid
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push webgrid/core Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: distribution/docker/images/core/Dockerfile
          tags: ${{ env.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ env.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  publish-node:
    name: 🐳 Publish Node to Docker Hub
    runs-on: ubuntu-latest
    needs: build-core
    strategy:
      matrix:
        browser: ["chrome", "firefox"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: core-executable
          path: .artifacts/core-executable

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=webgrid/node-${{ matrix.browser }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "tags=${TAGS}" >> $GITHUB_ENV
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: webgrid
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push webgrid/node-${{ matrix.browser }} Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: distribution/docker/images/node/Dockerfile
          build-args: browser=${{ matrix.browser }}
          tags: ${{ env.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ env.created }}
            org.opencontainers.image.revision=${{ github.sha }}

  publish-docs:
    name: 📚 Publish Docs to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-core
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: core-documentation
          path: .artifacts/core-documentation

      - uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install mkdocs theme & plugins
        run: |
          pip3 install --no-cache \
            'mkdocs-git-revision-date-localized-plugin>=0.4' \
            'mkdocs-material' \
            'mkdocs-mermaid2-plugin' \
            'mkdocs-codeinclude-plugin' \
            'mkdocs-material-extensions' \
            'mkdocs-simple-hooks' \
            'git+http://github.com/TilBlechschmidt/mkdocs-helm'

      - name: Build & deploy documentation
        env:
          HELM_USE_GIT_TAG: true
        run: |
          mkdocs --version
          mkdocs gh-deploy --force

  github-release:
    name: 🐙 Update GitHub Release
    needs: [build-core, build-api]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: core-executable
          path: .artifacts/core-executable

      - uses: actions/download-artifact@v2
        with:
          name: api-executable
          path: .artifacts/api-executable

      - name: Build release asset upload url
        run: |
          RELEASE_ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)
          if [[ -z "${RELEASE_ID}" ]]; then
            echo "There was no release ID in the GitHub event."
            exit 1
          fi

          RELEASE_ASSET_UPLOAD_URL="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets"
          echo "$RELEASE_ASSET_UPLOAD_URL"
          echo "RELEASE_ASSET_UPLOAD_URL=$RELEASE_ASSET_UPLOAD_URL" >> $GITHUB_ENV

      - name: Attach Core executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_ASSET_UPLOAD_URL }}?name=webgrid-core-linux
          asset_path: .artifacts/core-executable/webgrid
          asset_name: webgrid-core-linux
          asset_content_type: application/octet-stream

      - name: Attach API executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_ASSET_UPLOAD_URL }}?name=webgrid-api.js
          asset_path: .artifacts/api-executable/index.js
          asset_name: webgrid-api.js
          asset_content_type: application/javascript
